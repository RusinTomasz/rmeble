{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}

{% set conLabel %}
{{- label|raw -}}
{% endset %}


{% if numberOfNodes < 2 %}
	{%
	
 		 set gridClasses = 'full-width-node'
	%}
{% else %}
	{%
	
 		 set gridClasses = 'small-width-node'
	%}
{% endif %}
{% if nodeCategory %}
	{%
	
 		 set nodeCategory = nodeCategory|striptags
	%}
{% endif %}


{{ attach_library('classy/node') }}
{{ attach_library('rmeble/swiper') }}
{{ attach_library('rmeble/colorbox_js') }}


{% if view_mode == 'full' %}
	<article{{attributes.addClass(classes)}}>
		<div class="container">
			<h1 class="page-title">{{ conLabel|striptags }}</h1>
			{% if breadcrumbs %}
				{{ breadcrumbs }}
			{% endif %}
			{% if content.field_multiple_images_slides[0] is not empty %}
				<div class="realization-swiper-slider language-{{ current_language }}">
					<div class="swiper-wrapper">
						{{ content.field_multiple_images_slides }}
					</div>
					<div class="swiper-pagination"></div>
				</div>
			{% endif %}
			{% if content.body[0] is not empty %}
				{{ content.body }}
			{% endif %}

			{% if content.field_long_text_2[0] is not empty and content.field_single_image_2[0] is not empty and content.field_single_image_3[0] is not empty  %}
				<div class="realization-inside-block">
					<div class="inside-block-first-element">
						<div class="inside-block-image">{{ content.field_single_image_2 }}</div>
					</div>
					<div class="inside-block-second-element">
						<div class="inside-block-text">{{ content.field_long_text_2 }}</div>
						<div class="inside-block-background-image">{{ content.field_single_image_3 }}</div>
					</div>
				</div>
			{% endif %}

			{% if content.field_long_text[0] is not empty %}
				{{ content.field_long_text }}
			{% endif %}

		</div>
	</article>
{% elseif view_mode == 'teaser' %}
	<article{{attributes.addClass(classes,gridClasses,nodeCategory)}}>
		<div class="image-realization-teaser">
			<div class="realization-teaser-content">
				<h2 class="page-title">{{ conLabel|striptags }}</h2>
				<div class="links-wrapper">
					<a href="{{ path('entity.node.canonical', {'node': node.id}) }}" class="link-teaser">{{ "See the realization"|trans }}</a>
					{% if content.field_multiple_images_slides[0] is not empty %}
						<span class="separator">|</span>
						{% for key, item in content.field_multiple_images_slides if key|first != '#' %}
							{% if key == 0 %}
								<a class="link-teaser colorbox cboxElement" data-colorbox-gallery="{{ cs_group }}" href="{{ file_url(node.field_multiple_images_slides[0].entity.fileuri) }}">{{ "View gallery"|trans }}</a>
							{% else %}
								<a class="colorbox cboxElement" data-colorbox-gallery="{{ cs_group }}" href="{{ file_url(node.field_multiple_images_slides[key].entity.fileuri) }}"></a>
							{% endif %}
						{% endfor %}
					{% endif %}
				</div>
			</div>
		</div>
	</article>
{% elseif view_mode == 'token' %}
	<article{{attributes.addClass("swiper-slide",classes)}}>
		<div class="image-realization-token" style="background-image:url('{{ file_url(node.field_single_image.entity.fileuri) }}');">
			<div class="realization-token-content">
				<h2 class="page-title">{{ conLabel|striptags }}</h2>
				<div class="links-wrapper">
					<a href="{{ path('entity.node.canonical', {'node': node.id}) }}" class="link-teaser">{{ "See the realization"|trans }}</a>
					{% if content.field_multiple_images_slides[0] is not empty %}
						<span class="separator">|</span>
						{% for key, item in content.field_multiple_images_slides if key|first != '#' %}
							{% if key == 0 %}
								<a class="link-teaser colorbox cboxElement" data-colorbox-gallery="{{ cs_group }}" href="{{ file_url(node.field_multiple_images_slides[0].entity.fileuri) }}">{{ "View gallery"|trans }}</a>
							{% else %}
								<a class="colorbox cboxElement" data-colorbox-gallery="{{ cs_group }}" href="{{ file_url(node.field_multiple_images_slides[key].entity.fileuri) }}"></a>
							{% endif %}
						{% endfor %}
					{% endif %}
				</div>
			</div>
		</div>
	</article>
{% elseif view_mode == 'custom' %}
	<article{{attributes.addClass("swiper-slide",classes)}}>
		<div class="first-column">
			<div class="realization-title-wrapper">
				<div class="realization-title-content">
					<p class="realization-subtitle">{{ "The latest realization !"|trans }}</p>
					<h3 class="page-title">{{ conLabel|striptags }}</h3>
				</div>
			</div>
			<div class="intro-image-small">{{ content.field_single_image_5 }}</div>
			<div class="mobile-link-wrapper">
				<a href="{{ path('entity.node.canonical', {'node': node.id}) }}" class="realization-custom-link">{{ "See!"|trans }}</a>
			</div>
		</div>
		<div class="second-column">
			<div class="intro-image-big">{{ content.field_single_image_4 }}</div>
			<div class="second-column-flex">
				<div class="intro-text">{{ content.field_long_text_3 }}</div>
				<div class="intro-image-background">{{ content.field_single_image_6	 }}
					<a href="{{ path('entity.node.canonical', {'node': node.id}) }}" class="realization-custom-link">{{ "See!"|trans }}</a>
				</div>
			</div>
		</div>
	</article>
{% endif %}
